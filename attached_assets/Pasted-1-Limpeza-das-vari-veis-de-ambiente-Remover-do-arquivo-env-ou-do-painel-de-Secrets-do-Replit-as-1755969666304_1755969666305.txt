1) Limpeza das variáveis de ambiente

Remover do arquivo .env (ou do painel de Secrets do Replit) as seguintes variáveis, pois não serão mais usadas:

# ❌ Deletar — não usar mais
PGDATABASE=
PGHOST=
PGPORT=
PGUSER=
PGPASSWORD=
DATABASE_URL=

2) Manter variáveis do Supabase

Essas devem permanecer configuradas:

# ✅ Backend (server-side)
SUPABASE_URL=https://xxxx.supabase.co
SUPABASE_ANON_KEY=xxxx
SUPABASE_SERVICE_ROLE_KEY=xxxx

# ✅ Frontend (expostas no browser via Vite)
VITE_SUPABASE_URL=https://xxxx.supabase.co
VITE_SUPABASE_ANON_KEY=xxxx

# Opcional
SESSION_SECRET=uma_senha_segura_aleatoria
EMAIL_USER=seuemail@dominio.com
EMAIL_PASSWORD=suasenha

3) Atualizar conexão do backend para Supabase

No backend (server/index.ts ou server/app.ts), remova qualquer uso de pg ou DATABASE_URL.
Substitua por:

import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY! // ⚠️ apenas no backend
);

export default supabase;

4) CRUD de serviços, solicitantes e fornecedores

Cada CRUD deve usar Supabase client.
Exemplo para Serviços (routes/servicos.ts):

import express from "express";
import supabase from "../supabaseClient"; // importa o client configurado

const router = express.Router();

// ✅ Criar serviço
router.post("/", async (req, res) => {
  const { data, error } = await supabase
    .from("servicos")
    .insert([req.body]);

  if (error) return res.status(400).json({ error: error.message });
  res.json(data);
});

// ✅ Listar serviços
router.get("/", async (req, res) => {
  const { data, error } = await supabase.from("servicos").select("*");
  if (error) return res.status(400).json({ error: error.message });
  res.json(data);
});

// ✅ Atualizar serviço
router.put("/:id", async (req, res) => {
  const { id } = req.params;
  const { data, error } = await supabase
    .from("servicos")
    .update(req.body)
    .eq("id", id);

  if (error) return res.status(400).json({ error: error.message });
  res.json(data);
});

// ✅ Deletar serviço
router.delete("/:id", async (req, res) => {
  const { id } = req.params;
  const { error } = await supabase.from("servicos").delete().eq("id", id);

  if (error) return res.status(400).json({ error: error.message });
  res.json({ success: true });
});

export default router;


Repita a mesma lógica para solicitantes e fornecedores.

5) Middleware e DevTools

Habilitar CORS e JSON no servidor:

import express from "express";
import cors from "cors";

const app = express();

app.use(cors({ origin: "*" }));
app.use(express.json());

6) Checklist final

 Confirmar que apenas variáveis do Supabase estão ativas.

 Verificar se rotas servicos, solicitantes, fornecedores usam supabase.from(...).

 Excluir qualquer referência a pg ou DATABASE_URL.

 Fazer teste: criar um serviço → validar no painel do Supabase (SQL Editor → SELECT * FROM servicos).